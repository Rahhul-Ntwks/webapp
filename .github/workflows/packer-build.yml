name: Run Packer Build on a Template File
on:
  pull_request:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest
    name: Build Custom Image with Packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
        
      - name: Check Packer Version
        run: packer -v
      
      - name: Add required plugins
        run: packer init .

      - name: Authenticate Google Cloud SDK
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_SECRET_KEYS }}
      
      - name: zip the file
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'webapp.zip'
          exclusions: '*.git* /*node_modules/* '
        
      - name: Format Packer Template
        id: fmt
        run: packer fmt .
    
        
      - name: Validate Packer Template
        id: validate
        run: |
          packer validate \
          -var 'PROJECT_ID=${{ secrets.PROJECT_ID }}' \
          -var 'SOURCE_IMAGE_FAMILY=${{ secrets.SOURCE_IMAGE_FAMILY }}' \
          -var 'SSH_USERNAME=${{ secrets.SSH_USERNAME }}' \
          -var 'IMAGE_NAME=${{ secrets.IMAGE_NAME }}' \
          -var 'IMAGE_FAMILY=${{ secrets.IMAGE_FAMILY }}' \
          -var 'ZONE=${{ secrets.ZONE }}' \
          packer_config.pkr.hcl
        
      # - name: Run Packer Build
      #   run: |
      #     packer build \
      #     -var 'PROJECT_ID=${{ secrets.PROJECT_ID }}' \
      #     -var 'SOURCE_IMAGE_FAMILY=${{ secrets.SOURCE_IMAGE_FAMILY }}' \
      #     -var 'SSH_USERNAME=${{ secrets.SSH_USERNAME }}' \
      #     -var 'IMAGE_NAME=${{ secrets.IMAGE_NAME }}' \
      #     -var 'IMAGE_FAMILY=${{ secrets.IMAGE_FAMILY }}' \
      #     -var 'ZONE=${{ secrets.ZONE }}' \
      #     -force \
      #     packer_config.pkr.hcl

      - name: Get Image Source URI
        id: get_source_uri
        run: |
          image_uri=$(gcloud compute images describe devpacker1 --format="value(sourceDisk)")
          echo "IMAGE_URI=$image_uri" >> $GITHUB_ENV
        
      - name: Debug Image URI
        run: | 
          echo "Image URI: ${{env.IMAGE_URI}}"

      - name: Set timestamp
        id: timestamp
        run: |
            timestamp=$(date +%Y%m%d%H%M%S)
            echo "TIMESTAMP=$timestamp" >> $GITHUB_ENV

      - name: Create GCP VM Template
        run: |
          gcloud beta compute instance-templates create my-instance-template-${{ env.TIMESTAMP }} \
          --project=dev-project-414806 \
          --description="Instance template created from devpacker1 image" \
          --machine-type=n1-standard-1 \
          --network-interface=network-tier=PREMIUM,subnet=assignment-webapp \
          --instance-template-region=us-east1 \
          --metadata=wait_for_guest_attributes=true,startup-script="#!/bin/bash
          echo \"Setting up database configuration...\"
          cd /
          touch /opt/startupdb.sh
          
          env_file=\"/home/csye6225/webapp/.env\"
          touch \"$env_file\"
          cat << EOF > \"$env_file\"
          POSTGRES_USER=webapp
          POSTGRES_PASSWORD=BSuF7c
          POSTGRES_DB=my-database-assignment
          HOST=10.255.0.2
          EOF
          
          touch /tmp/.env
          destination_env_file=\"/tmp/.env\"
          cp \"$env_file\" \"$destination_env_file\"
          sudo chown csye6225:csye6225 /tmp/.env
          sudo chown csye6225:csye6225 /home/csye6225/webapp/.env
          " \
          --maintenance-policy=MIGRATE \
          --provisioning-model=STANDARD \
          --service-account=monitoring-service-account@dev-project-414806.iam.gserviceaccount.com \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --region=us-east1 \
          --tags=load-balanced-backend \
          --create-disk=auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/dev-project-414806/global/images/devpacker1,mode=rw,size=20,type=pd-balanced \
          --no-shielded-secure-boot \
          --shielded-vtpm \
          --shielded-integrity-monitoring \
          --reservation-affinity=any
        
        
                
    
      - name: Start Rolling Update
        run: |
              gcloud compute instance-groups managed rolling-action start-update instance-group-manager5 \
              --version template=my-instance-template-${{ env.TIMESTAMP }} \
    
      - name: Wait for Update Completion
        run: |
              while true; do
                status=$(gcloud compute instance-groups managed describe instance-group-manager5 \
                --zone ${{ secrets.ZONE }} \
                --format="value(status)" 2>/dev/null)
                if [[ $status == "REACHABLE" ]]; then
                  echo "Managed instance group update complete."
                  break
                elif [[ $status == "ROLLED_BACK" ]]; then
                  echo "Managed instance group update failed. Please check logs."
                  exit 1
                else
                  echo "Waiting for managed instance group update to complete..."
                  sleep 30
                fi
              done
  

