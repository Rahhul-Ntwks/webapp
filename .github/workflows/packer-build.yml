name: Run Packer Build on a Template File
on:
  pull_request:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest
    name: Build Custom Image with Packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
        
      - name: Check Packer Version
        run: packer -v
      
      - name: Add required plugins
        run: packer init .

      - name: Authenticate Google Cloud SDK
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_SECRET_KEYS }}
      
      - name: zip the file
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'webapp.zip'
          exclusions: '*.git* /*node_modules/* '
        
      - name: Format Packer Template
        id: fmt
        run: packer fmt .
    
        
      - name: Validate Packer Template
        id: validate
        run: |
          packer validate \
          -var 'PROJECT_ID=${{ secrets.PROJECT_ID }}' \
          -var 'SOURCE_IMAGE_FAMILY=${{ secrets.SOURCE_IMAGE_FAMILY }}' \
          -var 'SSH_USERNAME=${{ secrets.SSH_USERNAME }}' \
          -var 'IMAGE_NAME=${{ secrets.IMAGE_NAME }}' \
          -var 'IMAGE_FAMILY=${{ secrets.IMAGE_FAMILY }}' \
          -var 'ZONE=${{ secrets.ZONE }}' \
          packer_config.pkr.hcl
        
      # - name: Run Packer Build
      #   run: |
      #     packer build \
      #     -var 'PROJECT_ID=${{ secrets.PROJECT_ID }}' \
      #     -var 'SOURCE_IMAGE_FAMILY=${{ secrets.SOURCE_IMAGE_FAMILY }}' \
      #     -var 'SSH_USERNAME=${{ secrets.SSH_USERNAME }}' \
      #     -var 'IMAGE_NAME=${{ secrets.IMAGE_NAME }}' \
      #     -var 'IMAGE_FAMILY=${{ secrets.IMAGE_FAMILY }}' \
      #     -var 'ZONE=${{ secrets.ZONE }}' \
      #     -force \
      #     packer_config.pkr.hcl

      - name: Get Image Source URI
        id: get_source_uri
        run: |
          image_uri=$(gcloud compute images describe devpacker1 --format="value(sourceDisk)")
          echo "IMAGE_URI=$image_uri" >> $GITHUB_ENV
        
      - name: Debug Image URI
        run: | 
          echo "Image URI: ${{env.IMAGE_URI}}"

      - name: Set timestamp
        id: timestamp
        run: |
            timestamp=$(date +%Y%m%d%H%M%S)
            echo "TIMESTAMP=$timestamp" >> $GITHUB_ENV

      - name: Create GCP VM Template
        run: |
            gcloud compute instance-templates create my-instance-template-${{ env.TIMESTAMP }} \
            --project=dev-project-414806 \
            --description="Instance template created from devpacker1 image" \
            --machine-type=n1-standard-1 \
            --network-interface=network-tier=PREMIUM,subnet=assignment-webapp \
            --instance-template-region=us-east1 \
            --metadata=wait_for_guest_attributes=true,startup-script='#!/bin/bash
            cd /opt

            sudo touch /opt/startupdb.sh
            ENV_FILE="/home/csye6225/webapp/.env"
            tee "$ENV_FILE" > /dev/null <<EOF
            POSTGRES_USER=${{ env.POSTGRES_USER_NEW }}
            POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD_NEW }}
            POSTGRES_DB=${{ env.POSTGRES_DB_NEW }}
            HOST=${{ env.POSTGRES_HOST_NEW }}
            NODE_ENV=prod
            EOF
            touch /tmp/.env
            destination_env_file="/tmp/.env"
            cp "$env_file" "$destination_env_file"
            sudo chown csye6225:csye6225 /tmp/.env
            sudo chown csye6225:csye6225 /home/csye6225/webapp/.env
            ' \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=${{ env.SERVICE_ACCOUNT }} \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --region=us-east1 \
            --create-disk=${{env.CREATE_DISK}} \
            --shielded-vtpm \
            --tags=load-balanced-backend,allow-http \
            --shielded-integrity-monitoring \
            --reservation-affinity=any
          
        
        
                
    
      - name: Start Rolling Update
        run: |
          gcloud beta compute instance-groups managed rolling-action start-update instance-group-manager5 \
          --region=us-east1 \
          --version=template=projects/dev-project-414806/regions/us-east1/instanceTemplates/my-instance-template-${{ env.TIMESTAMP }}
      
      - name: updating MIG with health check
        run: |
          gcloud compute instance-groups managed update instance-group-manager5 \
          --health-check=projects/dev-project-414806/regions/us-east1/healthChecks/autohealing-health-check \
          --initial-delay=30s \
          --region=us-east1 \
        
      - name: Wait for Recreate Instances to Complete
        run: |
          while true; do
            if (gcloud compute instance-groups managed wait-until --stable ${{env.INSTANCE_GROUP_MANAGER}} --region=us-east1); then
              echo "Update completed successfully."
              break
            else
              echo "Update in progress..."
            fi
            sleep 30
          done
                
  

